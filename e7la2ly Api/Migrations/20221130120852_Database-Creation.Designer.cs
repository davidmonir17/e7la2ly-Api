// <auto-generated />
using System;
using Domain.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace e7la2ly_Api.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20221130120852_Database-Creation")]
    partial class DatabaseCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Branch", b =>
                {
                    b.Property<int>("branchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("branchId"), 1L, 1);

                    b.Property<string>("branchName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("brandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("closeTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("locationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("opiningTime")
                        .HasColumnType("datetime2");

                    b.HasKey("branchId");

                    b.HasIndex("brandId");

                    b.HasIndex("locationId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Domain.Models.Brand", b =>
                {
                    b.Property<int>("brandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("brandID"), 1L, 1);

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("brandName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("numBranches")
                        .HasColumnType("int");

                    b.HasKey("brandID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<int>("locationId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.HasIndex("locationId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Domain.Models.Employee", b =>
                {
                    b.Property<int>("empid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("empid"), 1L, 1);

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<int>("branchId")
                        .HasColumnType("int");

                    b.Property<int?>("locId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("nationalId")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.HasKey("empid");

                    b.HasIndex("branchId");

                    b.HasIndex("locId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Models.EmpShift", b =>
                {
                    b.Property<int>("empid")
                        .HasColumnType("int");

                    b.Property<DateTime>("shiftDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("shiftId")
                        .HasColumnType("int");

                    b.HasKey("empid", "shiftDate");

                    b.HasIndex("shiftId");

                    b.ToTable("EmpShifts");
                });

            modelBuilder.Entity("Domain.Models.EmpWorking", b =>
                {
                    b.Property<int>("empid")
                        .HasColumnType("int");

                    b.Property<DateTime>("from")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<int?>("clientId")
                        .HasColumnType("int");

                    b.HasKey("empid", "from", "To");

                    b.HasIndex("clientId");

                    b.ToTable("EmpWorkings");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.Property<int>("locId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("locId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("zone")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("locId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.Models.Shift", b =>
                {
                    b.Property<int>("shiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("shiftId"), 1L, 1);

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<int>("branchId")
                        .HasColumnType("int");

                    b.Property<string>("shiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("shiftId");

                    b.HasIndex("branchId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Domain.Models.Branch", b =>
                {
                    b.HasOne("Domain.Models.Brand", "brand")
                        .WithMany("branches")
                        .HasForeignKey("brandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Location", "location")
                        .WithMany("branches")
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("brand");

                    b.Navigation("location");
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.HasOne("Domain.Models.Location", "location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");
                });

            modelBuilder.Entity("Domain.Models.Employee", b =>
                {
                    b.HasOne("Domain.Models.Branch", "branch")
                        .WithMany("employees")
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Location", "location")
                        .WithMany("employees")
                        .HasForeignKey("locId");

                    b.Navigation("branch");

                    b.Navigation("location");
                });

            modelBuilder.Entity("Domain.Models.EmpShift", b =>
                {
                    b.HasOne("Domain.Models.Shift", "shift")
                        .WithMany("EmpShifts")
                        .HasForeignKey("shiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shift");
                });

            modelBuilder.Entity("Domain.Models.EmpWorking", b =>
                {
                    b.HasOne("Domain.Models.Client", "client")
                        .WithMany("empWorkings")
                        .HasForeignKey("clientId");

                    b.Navigation("client");
                });

            modelBuilder.Entity("Domain.Models.Shift", b =>
                {
                    b.HasOne("Domain.Models.Branch", "branch")
                        .WithMany("shifts")
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");
                });

            modelBuilder.Entity("Domain.Models.Branch", b =>
                {
                    b.Navigation("employees");

                    b.Navigation("shifts");
                });

            modelBuilder.Entity("Domain.Models.Brand", b =>
                {
                    b.Navigation("branches");
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.Navigation("empWorkings");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.Navigation("branches");

                    b.Navigation("employees");
                });

            modelBuilder.Entity("Domain.Models.Shift", b =>
                {
                    b.Navigation("EmpShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
